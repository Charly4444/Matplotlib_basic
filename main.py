import numpy as np
import matplotlib.pyplot as plt



#some data arrays created using numpy that will be used for plotting
x=np.arange(0,100)
theta = np.linspace(0,500,1000)
y1=x**2
y2=x**3+x
y3=3*np.sin(theta*np.pi/180)



#1) Very Simple graph; this can be used to quickly plot any data
# plt.figure()
# plt.plot(y2)
# plt.show()


#2) A more involved process of plotting involves:
#creating a figure object
#adding axes if youre going to plot multiple graphs that are not scaled the same
#plotting simply with the plot command

# fig = plt.figure(figsize=(6,5))
# ax1 = fig.add_axes([0.2,0.2,0.6,0.5])
# ax1.plot(x,y1)
#
# #extras
# # ax1.set_xlabel('x')
# # ax1.set_ylabel('y')
# # ax1.set_title('Graph of y=x^2')
#
# plt.show()

#more axis can be added to contain different graphs within same figure
#multiple axis on the same figure object may become hard to read
#see similar example below

fig=plt.figure()
ax1 = fig.add_axes([0,0,1,1])
ax2 = fig.add_axes([0.2,0.5,0.2,0.2])

ax1.plot(x,y2)
ax2.plot(theta,y3)

plt.show()


#3) to make graphs clearer in display we can create subplots
#specify the no of rows, cols as arguments; this creates a balance
#See example below

fig,axis = plt.subplots(nrows=1,ncols=3,figsize=[12,2])
axis[0].plot(x,y1,'b','--')
axis[1].plot(x,y2,'r')
axis[2].plot(theta,y3)
#notice how you can index into the list of axes generated by subplot

plt.show()

#Notice matplotlib.pyplot.show() is always called to display graphs

#CONSULT MATPLOTLIB DOCUMENTATION AND PLAY AROUND WITH SOME OF THE
#VALUES USED HERE AND SEE THIER EFFECTS
